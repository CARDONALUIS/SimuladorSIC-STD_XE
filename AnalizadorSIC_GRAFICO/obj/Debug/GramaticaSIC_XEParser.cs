//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\lluis\Documents\9no Semestre\Labo ProDeSistemas\Practica12\Proyecto LISTO\AnalizadorSIC_GRAFICO\AnalizadorSIC_GRAFICO\GramaticaSIC_XE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AnalizadorSIC_GRAFICO {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GramaticaSIC_XEParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, OP1=5, OP2=6, REG=7, REGCONV=8, SUMEXT=9, 
		TIPODIRECTIVA=10, DIRSTART=11, DIREND=12, TRSUB=13, CODOP=14, CONSTCAD=15, 
		CONSTHEX=16, ID=17, DIRBYTE=18, FINL=19, TAB=20, NUM=21, INDICE=22, COMPNUM=23, 
		WS=24;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_final = 2, RULE_entrada = 3, 
		RULE_proposiciones = 4, RULE_proposicion = 5, RULE_formato = 6, RULE_for1 = 7, 
		RULE_for2 = 8, RULE_for34 = 9, RULE_directiva = 10, RULE_etiqueta = 11, 
		RULE_simple = 12, RULE_indirecto = 13, RULE_inmediato = 14, RULE_indexado = 15, 
		RULE_opdirectiva = 16, RULE_tipoByte = 17, RULE_registros = 18, RULE_opBase = 19;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "final", "entrada", "proposiciones", "proposicion", 
		"formato", "for1", "for2", "for34", "directiva", "etiqueta", "simple", 
		"indirecto", "inmediato", "indexado", "opdirectiva", "tipoByte", "registros", 
		"opBase"
	};

	private static readonly string[] _LiteralNames = {
		null, "'BASE'", "'@'", "'#'", "','", null, null, null, null, "'+'", null, 
		"'START'", "'END'", "'RSUB'", null, null, null, null, "'BYTE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "OP1", "OP2", "REG", "REGCONV", "SUMEXT", 
		"TIPODIRECTIVA", "DIRSTART", "DIREND", "TRSUB", "CODOP", "CONSTCAD", "CONSTHEX", 
		"ID", "DIRBYTE", "FINL", "TAB", "NUM", "INDICE", "COMPNUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GramaticaSIC_XE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GramaticaSIC_XEParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
	 
		public ProgramaContext() { }
		public virtual void CopyFrom(ProgramaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramIniContext : ProgramaContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public FinalContext final() {
			return GetRuleContext<FinalContext>(0);
		}
		public ProgramIniContext(ProgramaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterProgramIni(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitProgramIni(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramIni(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			_localctx = new ProgramIniContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; inicio();
			State = 41; proposiciones(0);
			State = 42; final();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
	 
		public InicioContext() { }
		public virtual void CopyFrom(InicioContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InicioProContext : InicioContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public InicioProContext(InicioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterInicioPro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitInicioPro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicioPro(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InicioEtiContext : InicioContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode DIRSTART() { return GetToken(GramaticaSIC_XEParser.DIRSTART, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_XEParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public InicioEtiContext(InicioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterInicioEti(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitInicioEti(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicioEti(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 52;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				_localctx = new InicioEtiContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; etiqueta();
				State = 45; Match(TAB);
				State = 46; Match(DIRSTART);
				State = 47; Match(TAB);
				State = 48; Match(NUM);
				State = 49; Match(FINL);
				}
				break;

			case 2:
				_localctx = new InicioProContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalContext : ParserRuleContext {
		public FinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final; } }
	 
		public FinalContext() { }
		public virtual void CopyFrom(FinalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EndfinaltotalContext : FinalContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode DIREND() { return GetToken(GramaticaSIC_XEParser.DIREND, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(GramaticaSIC_XEParser.Eof, 0); }
		public EndfinaltotalContext(FinalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterEndfinaltotal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitEndfinaltotal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndfinaltotal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinEntradaContext : FinalContext {
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode DIREND() { return GetToken(GramaticaSIC_XEParser.DIREND, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(GramaticaSIC_XEParser.Eof, 0); }
		public FinEntradaContext(FinalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFinEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFinEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinalSinEntradaContext : FinalContext {
		public ITerminalNode TAB() { return GetToken(GramaticaSIC_XEParser.TAB, 0); }
		public ITerminalNode DIREND() { return GetToken(GramaticaSIC_XEParser.DIREND, 0); }
		public ITerminalNode Eof() { return GetToken(GramaticaSIC_XEParser.Eof, 0); }
		public FinalSinEntradaContext(FinalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFinalSinEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFinalSinEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalSinEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalContext final() {
		FinalContext _localctx = new FinalContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_final);
		try {
			State = 70;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				_localctx = new FinEntradaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(TAB);
				State = 55; Match(DIREND);
				State = 56; Match(TAB);
				State = 57; entrada();
				State = 58; Match(Eof);
				}
				break;

			case 2:
				_localctx = new EndfinaltotalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; etiqueta();
				State = 61; Match(TAB);
				State = 62; Match(DIREND);
				State = 63; Match(TAB);
				State = 64; entrada();
				State = 65; Match(Eof);
				}
				break;

			case 3:
				_localctx = new FinalSinEntradaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 67; Match(TAB);
				State = 68; Match(DIREND);
				State = 69; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_XEParser.ID, 0); }
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_entrada);
		try {
			State = 74;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(ID);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
	 
		public ProposicionesContext() { }
		public virtual void CopyFrom(ProposicionesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProposicionDuplicadaContext : ProposicionesContext {
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public ProposicionDuplicadaContext(ProposicionesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterProposicionDuplicada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitProposicionDuplicada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicionDuplicada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProposicionInstContext : ProposicionesContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public ProposicionInstContext(ProposicionesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterProposicionInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitProposicionInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicionInst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		return proposiciones(0);
	}

	private ProposicionesContext proposiciones(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, _parentState);
		ProposicionesContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_proposiciones, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ProposicionInstContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 77; proposicion();
			}
			_ctx.stop = _input.Lt(-1);
			State = 83;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ProposicionDuplicadaContext(new ProposicionesContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_proposiciones);
					State = 79;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 80; proposicion();
					}
					} 
				}
				State = 85;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
	 
		public ProposicionContext() { }
		public virtual void CopyFrom(ProposicionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropsicionInstruccionContext : ProposicionContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public PropsicionInstruccionContext(ProposicionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterPropsicionInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitPropsicionInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropsicionInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorContext : ProposicionContext {
		public ErrorContext(ProposicionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProposicionDirectivaContext : ProposicionContext {
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionDirectivaContext(ProposicionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterProposicionDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitProposicionDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicionDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposicion);
		try {
			State = 89;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				_localctx = new PropsicionInstruccionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; formato();
				}
				break;

			case 2:
				_localctx = new ProposicionDirectivaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; directiva();
				}
				break;

			case 3:
				_localctx = new ErrorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 88;
				MatchWildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
	 
		public FormatoContext() { }
		public virtual void CopyFrom(FormatoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Formato1Context : FormatoContext {
		public For1Context for1() {
			return GetRuleContext<For1Context>(0);
		}
		public Formato1Context(FormatoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFormato1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFormato1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Formato3Context : FormatoContext {
		public For34Context for34() {
			return GetRuleContext<For34Context>(0);
		}
		public Formato3Context(FormatoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFormato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFormato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Formato2Context : FormatoContext {
		public For2Context for2() {
			return GetRuleContext<For2Context>(0);
		}
		public Formato2Context(FormatoContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFormato2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFormato2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_formato);
		try {
			State = 94;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				_localctx = new Formato1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; for1();
				}
				break;

			case 2:
				_localctx = new Formato2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; for2();
				}
				break;

			case 3:
				_localctx = new Formato3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 93; for34();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For1Context : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode TAB() { return GetToken(GramaticaSIC_XEParser.TAB, 0); }
		public ITerminalNode OP1() { return GetToken(GramaticaSIC_XEParser.OP1, 0); }
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public For1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFor1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFor1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For1Context for1() {
		For1Context _localctx = new For1Context(_ctx, State);
		EnterRule(_localctx, 14, RULE_for1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; etiqueta();
			State = 97; Match(TAB);
			State = 98; Match(OP1);
			State = 99; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For2Context : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode OP2() { return GetToken(GramaticaSIC_XEParser.OP2, 0); }
		public RegistrosContext registros() {
			return GetRuleContext<RegistrosContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public For2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterFor2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitFor2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For2Context for2() {
		For2Context _localctx = new For2Context(_ctx, State);
		EnterRule(_localctx, 16, RULE_for2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; etiqueta();
			State = 102; Match(TAB);
			State = 103; Match(OP2);
			State = 104; Match(TAB);
			State = 105; registros();
			State = 106; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For34Context : ParserRuleContext {
		public For34Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for34; } }
	 
		public For34Context() { }
		public virtual void CopyFrom(For34Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class VisinstrRSUBContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode TAB() { return GetToken(GramaticaSIC_XEParser.TAB, 0); }
		public ITerminalNode TRSUB() { return GetToken(GramaticaSIC_XEParser.TRSUB, 0); }
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public VisinstrRSUBContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisinstrRSUB(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisinstrRSUB(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisinstrRSUB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visformato3_INDContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_XEParser.CODOP, 0); }
		public IndirectoContext indirecto() {
			return GetRuleContext<IndirectoContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public Visformato3_INDContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisformato3_IND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisformato3_IND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisformato3_IND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visformato4_INMContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_XEParser.CODOP, 0); }
		public InmediatoContext inmediato() {
			return GetRuleContext<InmediatoContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public Visformato4_INMContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisformato4_INM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisformato4_INM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisformato4_INM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visformato4_SIMContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_XEParser.CODOP, 0); }
		public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public Visformato4_SIMContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisformato4_SIM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisformato4_SIM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisformato4_SIM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visformato3_SIMContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_XEParser.CODOP, 0); }
		public SimpleContext simple() {
			return GetRuleContext<SimpleContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public Visformato3_SIMContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisformato3_SIM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisformato3_SIM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisformato3_SIM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visformato4_INDContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_XEParser.CODOP, 0); }
		public IndirectoContext indirecto() {
			return GetRuleContext<IndirectoContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public Visformato4_INDContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisformato4_IND(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisformato4_IND(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisformato4_IND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visformato3_INMContext : For34Context {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_XEParser.CODOP, 0); }
		public InmediatoContext inmediato() {
			return GetRuleContext<InmediatoContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public Visformato3_INMContext(For34Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterVisformato3_INM(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitVisformato3_INM(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisformato3_INM(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For34Context for34() {
		For34Context _localctx = new For34Context(_ctx, State);
		EnterRule(_localctx, 18, RULE_for34);
		try {
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new Visformato3_SIMContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; etiqueta();
				State = 109; Match(TAB);
				State = 110; Match(CODOP);
				State = 111; Match(TAB);
				State = 112; simple();
				State = 113; Match(FINL);
				}
				break;

			case 2:
				_localctx = new VisinstrRSUBContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; etiqueta();
				State = 116; Match(TAB);
				State = 117; Match(TRSUB);
				State = 118; Match(FINL);
				}
				break;

			case 3:
				_localctx = new Visformato3_INDContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; etiqueta();
				State = 121; Match(TAB);
				State = 122; Match(CODOP);
				State = 123; Match(TAB);
				State = 124; indirecto();
				State = 125; Match(FINL);
				}
				break;

			case 4:
				_localctx = new Visformato3_INMContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 127; etiqueta();
				State = 128; Match(TAB);
				State = 129; Match(CODOP);
				State = 130; Match(TAB);
				State = 131; inmediato();
				State = 132; Match(FINL);
				}
				break;

			case 5:
				_localctx = new Visformato4_SIMContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 134; etiqueta();
				State = 135; Match(TAB);
				State = 136; Match(SUMEXT);
				State = 137; Match(CODOP);
				State = 138; Match(TAB);
				State = 139; simple();
				State = 140; Match(FINL);
				}
				break;

			case 6:
				_localctx = new Visformato4_INDContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 142; etiqueta();
				State = 143; Match(TAB);
				State = 144; Match(SUMEXT);
				State = 145; Match(CODOP);
				State = 146; Match(TAB);
				State = 147; indirecto();
				State = 148; Match(FINL);
				}
				break;

			case 7:
				_localctx = new Visformato4_INMContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 150; etiqueta();
				State = 151; Match(TAB);
				State = 152; Match(SUMEXT);
				State = 153; Match(CODOP);
				State = 154; Match(TAB);
				State = 155; inmediato();
				State = 156; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
	 
		public DirectivaContext() { }
		public virtual void CopyFrom(DirectivaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DirectivaBaseContext : DirectivaContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public OpBaseContext opBase() {
			return GetRuleContext<OpBaseContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public DirectivaBaseContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterDirectivaBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitDirectivaBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DirectivaExistenContext : DirectivaContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_XEParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_XEParser.TAB, i);
		}
		public ITerminalNode TIPODIRECTIVA() { return GetToken(GramaticaSIC_XEParser.TIPODIRECTIVA, 0); }
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_XEParser.FINL, 0); }
		public DirectivaExistenContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterDirectivaExisten(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitDirectivaExisten(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaExisten(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_directiva);
		try {
			State = 174;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				_localctx = new DirectivaBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; etiqueta();
				State = 161; Match(TAB);
				State = 162; Match(T__0);
				State = 163; Match(TAB);
				State = 164; opBase();
				State = 165; Match(FINL);
				}
				break;

			case 2:
				_localctx = new DirectivaExistenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; etiqueta();
				State = 168; Match(TAB);
				State = 169; Match(TIPODIRECTIVA);
				State = 170; Match(TAB);
				State = 171; opdirectiva();
				State = 172; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_XEParser.ID, 0); }
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_XEParser.COMPNUM, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_etiqueta);
		try {
			State = 179;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(ID);
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case COMPNUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; Match(COMPNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_XEParser.ID, 0); }
		public IndexadoContext indexado() {
			return GetRuleContext<IndexadoContext>(0);
		}
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_XEParser.COMPNUM, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_XEParser.NUM, 0); }
		public SimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleContext simple() {
		SimpleContext _localctx = new SimpleContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_simple);
		try {
			State = 187;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; Match(ID);
				State = 182; indexado();
				}
				break;
			case COMPNUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(COMPNUM);
				State = 184; indexado();
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; Match(NUM);
				State = 186; indexado();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectoContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_XEParser.ID, 0); }
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_XEParser.COMPNUM, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_XEParser.NUM, 0); }
		public IndirectoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterIndirecto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitIndirecto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectoContext indirecto() {
		IndirectoContext _localctx = new IndirectoContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_indirecto);
		try {
			State = 195;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; Match(T__1);
				State = 190; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; Match(T__1);
				State = 192; Match(COMPNUM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; Match(T__1);
				State = 194; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InmediatoContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_XEParser.ID, 0); }
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_XEParser.COMPNUM, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_XEParser.NUM, 0); }
		public InmediatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterInmediato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitInmediato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InmediatoContext inmediato() {
		InmediatoContext _localctx = new InmediatoContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_inmediato);
		try {
			State = 203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(T__2);
				State = 198; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(T__2);
				State = 200; Match(COMPNUM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201; Match(T__2);
				State = 202; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexadoContext : ParserRuleContext {
		public ITerminalNode INDICE() { return GetToken(GramaticaSIC_XEParser.INDICE, 0); }
		public IndexadoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexado; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterIndexado(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitIndexado(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexado(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexadoContext indexado() {
		IndexadoContext _localctx = new IndexadoContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_indexado);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INDICE) {
				{
				State = 205; Match(INDICE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_XEParser.NUM, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(GramaticaSIC_XEParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(GramaticaSIC_XEParser.CONSTCAD, 0); }
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_XEParser.COMPNUM, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_opdirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTCAD) | (1L << CONSTHEX) | (1L << NUM) | (1L << COMPNUM))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoByteContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(GramaticaSIC_XEParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(GramaticaSIC_XEParser.CONSTCAD, 0); }
		public TipoByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterTipoByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitTipoByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoByteContext tipoByte() {
		TipoByteContext _localctx = new TipoByteContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_tipoByte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = _input.La(1);
			if ( !(_la==CONSTCAD || _la==CONSTHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegistrosContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_XEParser.NUM, 0); }
		public ITerminalNode REG() { return GetToken(GramaticaSIC_XEParser.REG, 0); }
		public ITerminalNode REGCONV() { return GetToken(GramaticaSIC_XEParser.REGCONV, 0); }
		public RegistrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_registros; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterRegistros(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitRegistros(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegistros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegistrosContext registros() {
		RegistrosContext _localctx = new RegistrosContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_registros);
		try {
			State = 218;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214; Match(REG);
				State = 215; Match(T__3);
				State = 216; Match(NUM);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; Match(REGCONV);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpBaseContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_XEParser.ID, 0); }
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_XEParser.COMPNUM, 0); }
		public OpBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opBase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.EnterOpBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_XEListener typedListener = listener as IGramaticaSIC_XEListener;
			if (typedListener != null) typedListener.ExitOpBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_XEVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_XEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpBaseContext opBase() {
		OpBaseContext _localctx = new OpBaseContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_opBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = _input.La(1);
			if ( !(_la==ID || _la==COMPNUM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return proposiciones_sempred((ProposicionesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool proposiciones_sempred(ProposicionesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1A\xE1\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x37\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4I\n\x4\x3\x5\x3\x5"+
		"\x5\x5M\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6T\n\x6\f\x6\xE\x6W\v\x6"+
		"\x3\a\x3\a\x3\a\x5\a\\\n\a\x3\b\x3\b\x3\b\x5\b\x61\n\b\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x5\v\xA1\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xB1\n\f\x3\r\x3\r\x3\r\x5\r\xB6\n\r\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xBE\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x5\xF\xC6\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\xCE\n\x10\x3\x11\x5\x11\xD1\n\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xDD\n\x14\x3\x15\x3"+
		"\x15\x3\x15\x2\x2\x3\n\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2\x2\x5\x5\x2\x11\x12\x17\x17\x19\x19\x3\x2\x11\x12\x4\x2\x13\x13\x19"+
		"\x19\xE8\x2*\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2\x6H\x3\x2\x2\x2\bL\x3\x2\x2"+
		"\x2\nN\x3\x2\x2\x2\f[\x3\x2\x2\x2\xE`\x3\x2\x2\x2\x10\x62\x3\x2\x2\x2"+
		"\x12g\x3\x2\x2\x2\x14\xA0\x3\x2\x2\x2\x16\xB0\x3\x2\x2\x2\x18\xB5\x3\x2"+
		"\x2\x2\x1A\xBD\x3\x2\x2\x2\x1C\xC5\x3\x2\x2\x2\x1E\xCD\x3\x2\x2\x2 \xD0"+
		"\x3\x2\x2\x2\"\xD2\x3\x2\x2\x2$\xD4\x3\x2\x2\x2&\xDC\x3\x2\x2\x2(\xDE"+
		"\x3\x2\x2\x2*+\x5\x4\x3\x2+,\x5\n\x6\x2,-\x5\x6\x4\x2-\x3\x3\x2\x2\x2"+
		"./\x5\x18\r\x2/\x30\a\x16\x2\x2\x30\x31\a\r\x2\x2\x31\x32\a\x16\x2\x2"+
		"\x32\x33\a\x17\x2\x2\x33\x34\a\x15\x2\x2\x34\x37\x3\x2\x2\x2\x35\x37\x5"+
		"\f\a\x2\x36.\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\x5\x3\x2\x2\x2\x38\x39"+
		"\a\x16\x2\x2\x39:\a\xE\x2\x2:;\a\x16\x2\x2;<\x5\b\x5\x2<=\a\x2\x2\x3="+
		"I\x3\x2\x2\x2>?\x5\x18\r\x2?@\a\x16\x2\x2@\x41\a\xE\x2\x2\x41\x42\a\x16"+
		"\x2\x2\x42\x43\x5\b\x5\x2\x43\x44\a\x2\x2\x3\x44I\x3\x2\x2\x2\x45\x46"+
		"\a\x16\x2\x2\x46G\a\xE\x2\x2GI\a\x2\x2\x3H\x38\x3\x2\x2\x2H>\x3\x2\x2"+
		"\x2H\x45\x3\x2\x2\x2I\a\x3\x2\x2\x2JM\a\x13\x2\x2KM\x3\x2\x2\x2LJ\x3\x2"+
		"\x2\x2LK\x3\x2\x2\x2M\t\x3\x2\x2\x2NO\b\x6\x1\x2OP\x5\f\a\x2PU\x3\x2\x2"+
		"\x2QR\f\x4\x2\x2RT\x5\f\a\x2SQ\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2"+
		"UV\x3\x2\x2\x2V\v\x3\x2\x2\x2WU\x3\x2\x2\x2X\\\x5\xE\b\x2Y\\\x5\x16\f"+
		"\x2Z\\\v\x2\x2\x2[X\x3\x2\x2\x2[Y\x3\x2\x2\x2[Z\x3\x2\x2\x2\\\r\x3\x2"+
		"\x2\x2]\x61\x5\x10\t\x2^\x61\x5\x12\n\x2_\x61\x5\x14\v\x2`]\x3\x2\x2\x2"+
		"`^\x3\x2\x2\x2`_\x3\x2\x2\x2\x61\xF\x3\x2\x2\x2\x62\x63\x5\x18\r\x2\x63"+
		"\x64\a\x16\x2\x2\x64\x65\a\a\x2\x2\x65\x66\a\x15\x2\x2\x66\x11\x3\x2\x2"+
		"\x2gh\x5\x18\r\x2hi\a\x16\x2\x2ij\a\b\x2\x2jk\a\x16\x2\x2kl\x5&\x14\x2"+
		"lm\a\x15\x2\x2m\x13\x3\x2\x2\x2no\x5\x18\r\x2op\a\x16\x2\x2pq\a\x10\x2"+
		"\x2qr\a\x16\x2\x2rs\x5\x1A\xE\x2st\a\x15\x2\x2t\xA1\x3\x2\x2\x2uv\x5\x18"+
		"\r\x2vw\a\x16\x2\x2wx\a\xF\x2\x2xy\a\x15\x2\x2y\xA1\x3\x2\x2\x2z{\x5\x18"+
		"\r\x2{|\a\x16\x2\x2|}\a\x10\x2\x2}~\a\x16\x2\x2~\x7F\x5\x1C\xF\x2\x7F"+
		"\x80\a\x15\x2\x2\x80\xA1\x3\x2\x2\x2\x81\x82\x5\x18\r\x2\x82\x83\a\x16"+
		"\x2\x2\x83\x84\a\x10\x2\x2\x84\x85\a\x16\x2\x2\x85\x86\x5\x1E\x10\x2\x86"+
		"\x87\a\x15\x2\x2\x87\xA1\x3\x2\x2\x2\x88\x89\x5\x18\r\x2\x89\x8A\a\x16"+
		"\x2\x2\x8A\x8B\a\v\x2\x2\x8B\x8C\a\x10\x2\x2\x8C\x8D\a\x16\x2\x2\x8D\x8E"+
		"\x5\x1A\xE\x2\x8E\x8F\a\x15\x2\x2\x8F\xA1\x3\x2\x2\x2\x90\x91\x5\x18\r"+
		"\x2\x91\x92\a\x16\x2\x2\x92\x93\a\v\x2\x2\x93\x94\a\x10\x2\x2\x94\x95"+
		"\a\x16\x2\x2\x95\x96\x5\x1C\xF\x2\x96\x97\a\x15\x2\x2\x97\xA1\x3\x2\x2"+
		"\x2\x98\x99\x5\x18\r\x2\x99\x9A\a\x16\x2\x2\x9A\x9B\a\v\x2\x2\x9B\x9C"+
		"\a\x10\x2\x2\x9C\x9D\a\x16\x2\x2\x9D\x9E\x5\x1E\x10\x2\x9E\x9F\a\x15\x2"+
		"\x2\x9F\xA1\x3\x2\x2\x2\xA0n\x3\x2\x2\x2\xA0u\x3\x2\x2\x2\xA0z\x3\x2\x2"+
		"\x2\xA0\x81\x3\x2\x2\x2\xA0\x88\x3\x2\x2\x2\xA0\x90\x3\x2\x2\x2\xA0\x98"+
		"\x3\x2\x2\x2\xA1\x15\x3\x2\x2\x2\xA2\xA3\x5\x18\r\x2\xA3\xA4\a\x16\x2"+
		"\x2\xA4\xA5\a\x3\x2\x2\xA5\xA6\a\x16\x2\x2\xA6\xA7\x5(\x15\x2\xA7\xA8"+
		"\a\x15\x2\x2\xA8\xB1\x3\x2\x2\x2\xA9\xAA\x5\x18\r\x2\xAA\xAB\a\x16\x2"+
		"\x2\xAB\xAC\a\f\x2\x2\xAC\xAD\a\x16\x2\x2\xAD\xAE\x5\"\x12\x2\xAE\xAF"+
		"\a\x15\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xA2\x3\x2\x2\x2\xB0\xA9\x3\x2\x2"+
		"\x2\xB1\x17\x3\x2\x2\x2\xB2\xB6\a\x13\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB6"+
		"\a\x19\x2\x2\xB5\xB2\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2"+
		"\x2\xB6\x19\x3\x2\x2\x2\xB7\xB8\a\x13\x2\x2\xB8\xBE\x5 \x11\x2\xB9\xBA"+
		"\a\x19\x2\x2\xBA\xBE\x5 \x11\x2\xBB\xBC\a\x17\x2\x2\xBC\xBE\x5 \x11\x2"+
		"\xBD\xB7\x3\x2\x2\x2\xBD\xB9\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\x1B\x3"+
		"\x2\x2\x2\xBF\xC0\a\x4\x2\x2\xC0\xC6\a\x13\x2\x2\xC1\xC2\a\x4\x2\x2\xC2"+
		"\xC6\a\x19\x2\x2\xC3\xC4\a\x4\x2\x2\xC4\xC6\a\x17\x2\x2\xC5\xBF\x3\x2"+
		"\x2\x2\xC5\xC1\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC6\x1D\x3\x2\x2\x2\xC7"+
		"\xC8\a\x5\x2\x2\xC8\xCE\a\x13\x2\x2\xC9\xCA\a\x5\x2\x2\xCA\xCE\a\x19\x2"+
		"\x2\xCB\xCC\a\x5\x2\x2\xCC\xCE\a\x17\x2\x2\xCD\xC7\x3\x2\x2\x2\xCD\xC9"+
		"\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\x1F\x3\x2\x2\x2\xCF\xD1\a\x18\x2"+
		"\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1!\x3\x2\x2\x2\xD2\xD3\t"+
		"\x2\x2\x2\xD3#\x3\x2\x2\x2\xD4\xD5\t\x3\x2\x2\xD5%\x3\x2\x2\x2\xD6\xDD"+
		"\a\x17\x2\x2\xD7\xDD\a\t\x2\x2\xD8\xD9\a\t\x2\x2\xD9\xDA\a\x6\x2\x2\xDA"+
		"\xDD\a\x17\x2\x2\xDB\xDD\a\n\x2\x2\xDC\xD6\x3\x2\x2\x2\xDC\xD7\x3\x2\x2"+
		"\x2\xDC\xD8\x3\x2\x2\x2\xDC\xDB\x3\x2\x2\x2\xDD\'\x3\x2\x2\x2\xDE\xDF"+
		"\t\x4\x2\x2\xDF)\x3\x2\x2\x2\x10\x36HLU[`\xA0\xB0\xB5\xBD\xC5\xCD\xD0"+
		"\xDC";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AnalizadorSIC_GRAFICO
