//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\lluis\Desktop\9no Semestre\Labo ProDeSistemas\Practica12\Proyecto LISTO\AnalizadorSIC_GRAFICO\AnalizadorSIC_GRAFICO\GramaticaSIC_STD.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AnalizadorSIC_GRAFICO {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GramaticaSIC_STDParser : Parser {
	public const int
		TIPODIRECTIVA=1, DIRSTART=2, DIREND=3, TRSUB=4, CODOP=5, CONSTCAD=6, CONSTHEX=7, 
		ID=8, DIRBYTE=9, FINL=10, TAB=11, NUM=12, INDICE=13, COMPNUM=14, WS=15;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_final = 2, RULE_entrada = 3, 
		RULE_proposiciones = 4, RULE_proposicion = 5, RULE_instruccion = 6, RULE_directiva = 7, 
		RULE_etiqueta = 8, RULE_opinstruccion = 9, RULE_indexado = 10, RULE_opdirectiva = 11, 
		RULE_tipoByte = 12;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "final", "entrada", "proposiciones", "proposicion", 
		"instruccion", "directiva", "etiqueta", "opinstruccion", "indexado", "opdirectiva", 
		"tipoByte"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'START'", "'END'", "'RSUB'", null, null, null, null, "'BYTE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TIPODIRECTIVA", "DIRSTART", "DIREND", "TRSUB", "CODOP", "CONSTCAD", 
		"CONSTHEX", "ID", "DIRBYTE", "FINL", "TAB", "NUM", "INDICE", "COMPNUM", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GramaticaSIC_STD.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GramaticaSIC_STDParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
	 
		public ProgramaContext() { }
		public virtual void CopyFrom(ProgramaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramIniContext : ProgramaContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public FinalContext final() {
			return GetRuleContext<FinalContext>(0);
		}
		public ProgramIniContext(ProgramaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterProgramIni(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitProgramIni(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramIni(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			_localctx = new ProgramIniContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; inicio();
			State = 27; proposiciones(0);
			State = 28; final();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
	 
		public InicioContext() { }
		public virtual void CopyFrom(InicioContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InicioProContext : InicioContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public InicioProContext(InicioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterInicioPro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitInicioPro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicioPro(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InicioEtiContext : InicioContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_STDParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_STDParser.TAB, i);
		}
		public ITerminalNode DIRSTART() { return GetToken(GramaticaSIC_STDParser.DIRSTART, 0); }
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_STDParser.NUM, 0); }
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_STDParser.FINL, 0); }
		public InicioEtiContext(InicioContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterInicioEti(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitInicioEti(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicioEti(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 38;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				_localctx = new InicioEtiContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; etiqueta();
				State = 31; Match(TAB);
				State = 32; Match(DIRSTART);
				State = 33; Match(TAB);
				State = 34; Match(NUM);
				State = 35; Match(FINL);
				}
				break;

			case 2:
				_localctx = new InicioProContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; proposicion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalContext : ParserRuleContext {
		public FinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final; } }
	 
		public FinalContext() { }
		public virtual void CopyFrom(FinalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EndfinaltotalContext : FinalContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_STDParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_STDParser.TAB, i);
		}
		public ITerminalNode DIREND() { return GetToken(GramaticaSIC_STDParser.DIREND, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(GramaticaSIC_STDParser.Eof, 0); }
		public EndfinaltotalContext(FinalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterEndfinaltotal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitEndfinaltotal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndfinaltotal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinEntradaContext : FinalContext {
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_STDParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_STDParser.TAB, i);
		}
		public ITerminalNode DIREND() { return GetToken(GramaticaSIC_STDParser.DIREND, 0); }
		public EntradaContext entrada() {
			return GetRuleContext<EntradaContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(GramaticaSIC_STDParser.Eof, 0); }
		public FinEntradaContext(FinalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterFinEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitFinEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FinalSinEntradaContext : FinalContext {
		public ITerminalNode TAB() { return GetToken(GramaticaSIC_STDParser.TAB, 0); }
		public ITerminalNode DIREND() { return GetToken(GramaticaSIC_STDParser.DIREND, 0); }
		public ITerminalNode Eof() { return GetToken(GramaticaSIC_STDParser.Eof, 0); }
		public FinalSinEntradaContext(FinalContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterFinalSinEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitFinalSinEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalSinEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalContext final() {
		FinalContext _localctx = new FinalContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_final);
		try {
			State = 56;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				_localctx = new FinEntradaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; Match(TAB);
				State = 41; Match(DIREND);
				State = 42; Match(TAB);
				State = 43; entrada();
				State = 44; Match(Eof);
				}
				break;

			case 2:
				_localctx = new EndfinaltotalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; etiqueta();
				State = 47; Match(TAB);
				State = 48; Match(DIREND);
				State = 49; Match(TAB);
				State = 50; entrada();
				State = 51; Match(Eof);
				}
				break;

			case 3:
				_localctx = new FinalSinEntradaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; Match(TAB);
				State = 54; Match(DIREND);
				State = 55; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntradaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_STDParser.ID, 0); }
		public EntradaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entrada; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterEntrada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitEntrada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntrada(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntradaContext entrada() {
		EntradaContext _localctx = new EntradaContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_entrada);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(ID);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionesContext : ParserRuleContext {
		public ProposicionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposiciones; } }
	 
		public ProposicionesContext() { }
		public virtual void CopyFrom(ProposicionesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProposicionDuplicadaContext : ProposicionesContext {
		public ProposicionesContext proposiciones() {
			return GetRuleContext<ProposicionesContext>(0);
		}
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public ProposicionDuplicadaContext(ProposicionesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterProposicionDuplicada(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitProposicionDuplicada(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicionDuplicada(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProposicionInstContext : ProposicionesContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public ProposicionInstContext(ProposicionesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterProposicionInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitProposicionInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicionInst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionesContext proposiciones() {
		return proposiciones(0);
	}

	private ProposicionesContext proposiciones(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ProposicionesContext _localctx = new ProposicionesContext(_ctx, _parentState);
		ProposicionesContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_proposiciones, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ProposicionInstContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 63; proposicion();
			}
			_ctx.stop = _input.Lt(-1);
			State = 69;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ProposicionDuplicadaContext(new ProposicionesContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_proposiciones);
					State = 65;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 66; proposicion();
					}
					} 
				}
				State = 71;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
	 
		public ProposicionContext() { }
		public virtual void CopyFrom(ProposicionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropsicionInstruccionContext : ProposicionContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public PropsicionInstruccionContext(ProposicionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterPropsicionInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitPropsicionInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropsicionInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropsicionDirectivaContext : ProposicionContext {
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public PropsicionDirectivaContext(ProposicionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterPropsicionDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitPropsicionDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropsicionDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ErrorContext : ProposicionContext {
		public ErrorContext(ProposicionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_proposicion);
		try {
			State = 75;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				_localctx = new PropsicionInstruccionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; instruccion();
				}
				break;

			case 2:
				_localctx = new PropsicionDirectivaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; directiva();
				}
				break;

			case 3:
				_localctx = new ErrorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				MatchWildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
	 
		public InstruccionContext() { }
		public virtual void CopyFrom(InstruccionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrRSUBContext : InstruccionContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode TAB() { return GetToken(GramaticaSIC_STDParser.TAB, 0); }
		public ITerminalNode TRSUB() { return GetToken(GramaticaSIC_STDParser.TRSUB, 0); }
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_STDParser.FINL, 0); }
		public InstrRSUBContext(InstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterInstrRSUB(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitInstrRSUB(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrRSUB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstruccionVisitorContext : InstruccionContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_STDParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_STDParser.TAB, i);
		}
		public ITerminalNode CODOP() { return GetToken(GramaticaSIC_STDParser.CODOP, 0); }
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_STDParser.FINL, 0); }
		public InstruccionVisitorContext(InstruccionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterInstruccionVisitor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitInstruccionVisitor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccionVisitor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_instruccion);
		try {
			State = 89;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				_localctx = new InstruccionVisitorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; etiqueta();
				State = 78; Match(TAB);
				State = 79; Match(CODOP);
				State = 80; Match(TAB);
				State = 81; opinstruccion();
				State = 82; Match(FINL);
				}
				break;

			case 2:
				_localctx = new InstrRSUBContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; etiqueta();
				State = 85; Match(TAB);
				State = 86; Match(TRSUB);
				State = 87; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
	 
		public DirectivaContext() { }
		public virtual void CopyFrom(DirectivaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DirectivaExistenContext : DirectivaContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode[] TAB() { return GetTokens(GramaticaSIC_STDParser.TAB); }
		public ITerminalNode TAB(int i) {
			return GetToken(GramaticaSIC_STDParser.TAB, i);
		}
		public ITerminalNode TIPODIRECTIVA() { return GetToken(GramaticaSIC_STDParser.TIPODIRECTIVA, 0); }
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode FINL() { return GetToken(GramaticaSIC_STDParser.FINL, 0); }
		public DirectivaExistenContext(DirectivaContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterDirectivaExisten(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitDirectivaExisten(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivaExisten(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_directiva);
		try {
			_localctx = new DirectivaExistenContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; etiqueta();
			State = 92; Match(TAB);
			State = 93; Match(TIPODIRECTIVA);
			State = 94; Match(TAB);
			State = 95; opdirectiva();
			State = 96; Match(FINL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_STDParser.ID, 0); }
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_STDParser.COMPNUM, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_etiqueta);
		try {
			State = 101;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; Match(ID);
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case COMPNUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100; Match(COMPNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GramaticaSIC_STDParser.ID, 0); }
		public IndexadoContext indexado() {
			return GetRuleContext<IndexadoContext>(0);
		}
		public ITerminalNode COMPNUM() { return GetToken(GramaticaSIC_STDParser.COMPNUM, 0); }
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_opinstruccion);
		try {
			State = 108;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 103; Match(ID);
				State = 104; indexado();
				}
				}
				break;
			case FINL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case COMPNUM:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 106; Match(COMPNUM);
				State = 107; indexado();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexadoContext : ParserRuleContext {
		public ITerminalNode INDICE() { return GetToken(GramaticaSIC_STDParser.INDICE, 0); }
		public IndexadoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexado; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterIndexado(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitIndexado(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexado(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexadoContext indexado() {
		IndexadoContext _localctx = new IndexadoContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_indexado);
		try {
			State = 112;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INDICE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(INDICE);
				}
				break;
			case FINL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(GramaticaSIC_STDParser.NUM, 0); }
		public ITerminalNode CONSTHEX() { return GetToken(GramaticaSIC_STDParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(GramaticaSIC_STDParser.CONSTCAD, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_opdirectiva);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTCAD) | (1L << CONSTHEX) | (1L << NUM))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoByteContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(GramaticaSIC_STDParser.CONSTHEX, 0); }
		public ITerminalNode CONSTCAD() { return GetToken(GramaticaSIC_STDParser.CONSTCAD, 0); }
		public TipoByteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipoByte; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.EnterTipoByte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGramaticaSIC_STDListener typedListener = listener as IGramaticaSIC_STDListener;
			if (typedListener != null) typedListener.ExitTipoByte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGramaticaSIC_STDVisitor<TResult> typedVisitor = visitor as IGramaticaSIC_STDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoByte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoByteContext tipoByte() {
		TipoByteContext _localctx = new TipoByteContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_tipoByte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = _input.La(1);
			if ( !(_la==CONSTCAD || _la==CONSTHEX) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return proposiciones_sempred((ProposicionesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool proposiciones_sempred(ProposicionesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11y\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3)\n\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x5\x4;\n\x4\x3\x5\x3\x5\x5\x5?\n\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\x46\n\x6\f\x6\xE\x6I\v\x6\x3\a\x3\a\x3\a\x5\a"+
		"N\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b"+
		"\\\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x5\nh\n\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x5\vo\n\v\x3\f\x3\f\x5\fs\n\f\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x2\x2\x3\n\xF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x2\x4\x4\x2\b\t\xE\xE\x3\x2\b\tx\x2"+
		"\x1C\x3\x2\x2\x2\x4(\x3\x2\x2\x2\x6:\x3\x2\x2\x2\b>\x3\x2\x2\x2\n@\x3"+
		"\x2\x2\x2\fM\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10]\x3\x2\x2\x2\x12g\x3\x2\x2"+
		"\x2\x14n\x3\x2\x2\x2\x16r\x3\x2\x2\x2\x18t\x3\x2\x2\x2\x1Av\x3\x2\x2\x2"+
		"\x1C\x1D\x5\x4\x3\x2\x1D\x1E\x5\n\x6\x2\x1E\x1F\x5\x6\x4\x2\x1F\x3\x3"+
		"\x2\x2\x2 !\x5\x12\n\x2!\"\a\r\x2\x2\"#\a\x4\x2\x2#$\a\r\x2\x2$%\a\xE"+
		"\x2\x2%&\a\f\x2\x2&)\x3\x2\x2\x2\')\x5\f\a\x2( \x3\x2\x2\x2(\'\x3\x2\x2"+
		"\x2)\x5\x3\x2\x2\x2*+\a\r\x2\x2+,\a\x5\x2\x2,-\a\r\x2\x2-.\x5\b\x5\x2"+
		"./\a\x2\x2\x3/;\x3\x2\x2\x2\x30\x31\x5\x12\n\x2\x31\x32\a\r\x2\x2\x32"+
		"\x33\a\x5\x2\x2\x33\x34\a\r\x2\x2\x34\x35\x5\b\x5\x2\x35\x36\a\x2\x2\x3"+
		"\x36;\x3\x2\x2\x2\x37\x38\a\r\x2\x2\x38\x39\a\x5\x2\x2\x39;\a\x2\x2\x3"+
		":*\x3\x2\x2\x2:\x30\x3\x2\x2\x2:\x37\x3\x2\x2\x2;\a\x3\x2\x2\x2<?\a\n"+
		"\x2\x2=?\x3\x2\x2\x2><\x3\x2\x2\x2>=\x3\x2\x2\x2?\t\x3\x2\x2\x2@\x41\b"+
		"\x6\x1\x2\x41\x42\x5\f\a\x2\x42G\x3\x2\x2\x2\x43\x44\f\x4\x2\x2\x44\x46"+
		"\x5\f\a\x2\x45\x43\x3\x2\x2\x2\x46I\x3\x2\x2\x2G\x45\x3\x2\x2\x2GH\x3"+
		"\x2\x2\x2H\v\x3\x2\x2\x2IG\x3\x2\x2\x2JN\x5\xE\b\x2KN\x5\x10\t\x2LN\v"+
		"\x2\x2\x2MJ\x3\x2\x2\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2N\r\x3\x2\x2\x2OP\x5"+
		"\x12\n\x2PQ\a\r\x2\x2QR\a\a\x2\x2RS\a\r\x2\x2ST\x5\x14\v\x2TU\a\f\x2\x2"+
		"U\\\x3\x2\x2\x2VW\x5\x12\n\x2WX\a\r\x2\x2XY\a\x6\x2\x2YZ\a\f\x2\x2Z\\"+
		"\x3\x2\x2\x2[O\x3\x2\x2\x2[V\x3\x2\x2\x2\\\xF\x3\x2\x2\x2]^\x5\x12\n\x2"+
		"^_\a\r\x2\x2_`\a\x3\x2\x2`\x61\a\r\x2\x2\x61\x62\x5\x18\r\x2\x62\x63\a"+
		"\f\x2\x2\x63\x11\x3\x2\x2\x2\x64h\a\n\x2\x2\x65h\x3\x2\x2\x2\x66h\a\x10"+
		"\x2\x2g\x64\x3\x2\x2\x2g\x65\x3\x2\x2\x2g\x66\x3\x2\x2\x2h\x13\x3\x2\x2"+
		"\x2ij\a\n\x2\x2jo\x5\x16\f\x2ko\x3\x2\x2\x2lm\a\x10\x2\x2mo\x5\x16\f\x2"+
		"ni\x3\x2\x2\x2nk\x3\x2\x2\x2nl\x3\x2\x2\x2o\x15\x3\x2\x2\x2ps\a\xF\x2"+
		"\x2qs\x3\x2\x2\x2rp\x3\x2\x2\x2rq\x3\x2\x2\x2s\x17\x3\x2\x2\x2tu\t\x2"+
		"\x2\x2u\x19\x3\x2\x2\x2vw\t\x3\x2\x2w\x1B\x3\x2\x2\x2\v(:>GM[gnr";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AnalizadorSIC_GRAFICO
